/*
 * Name: Chris Caldwell
 * Date Submitted: 2/10/22
 * Lab Section: 003
 * Assignment Name: Lab 2 - Infix to Postfix Conversion
 */

#include <iostream>
#include <string>
#include <stack>

using namespace std;

//Helper function prototypes
bool isAligned(string in[], int length);
bool isNum(const string &str);
int prec(string op);


//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols
int infixToPostfix(string infix[], int length, string postfix[]){
    int pfLength = 0;
    stack<string> ops;

    //Ensure parentheses are alligned
    if(!isAligned(infix, length))
        return 0; 

    for(int i = 0; i < length; i++){
        if(isNum(infix[i])){            //infix[i] is number
            postfix[pfLength] = infix[i];
            pfLength++;
        } else if(infix[i] == "("){     //infix[i] is open parenthesis
            ops.push(infix[i]);
        } else if(infix[i] == ")"){     //infix[i] is closed parenthesis
            while(ops.top() != "("){
                postfix[pfLength] = ops.top();
                ops.pop();
                pfLength++;
            }
            ops.pop();
        } else {                        //infix[i] is an operator
            //remove from the stack until empty, hit op of lower prec., or hit
            //left parenthesis
            while(!ops.empty() && prec(ops.top()) >= prec(infix[i]) &&
                    ops.top() != "("){
                postfix[pfLength] = ops.top();
                ops.pop();
                pfLength++;
            }
            ops.push(infix[i]);
        }
    }

    //add remaining operators to postfix array
    while(!ops.empty()){
        postfix[pfLength] = ops.top();
        ops.pop();
        pfLength++;
    }
    
    return pfLength;
}

//Helper function to determine if parentheses are aligned:
//Iterates through the infix array, adds open parentheses to a stack,
//and pops them if a closing parenthesis is found.
//Returns false if parentheses are unaligned, and true otherwise.
bool isAligned(string in[], int length){
    stack<string> pars;

    for(int i = 0; i < length; i ++){
        if (in[i] == "(") {
            pars.push(in[i]);
        } else if(in[i] == ")") {
            if(pars.empty() || pars.top() != "(") 
                return false;
            pars.pop();
        }
    }

    //if any leftover parentheses, fail alignment check
    if(!pars.empty())
        return false;

    return true;
}

//Simple function to determine if passed value is a number
bool isNum(const string &str)
{
    for (char const &c : str) {
        if (isdigit(c) == 0) return false;
    }
    return true;
}

//Helper function to determine operator precedence
//Returns higher number for higher precedence
int prec(string op){
    if(op == "*" || op == "/" || op == "%")
        return 2;
    else if(op == "+" || op == "-")
        return 1;
    return 0;
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +
int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "+", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}